/// @dev Takes `noncesToSkip: uint8 | initcode` and deploys using create
#define macro MAIN() = takes(0) returns(0) {
    _MAIN(returndatasize)
}

/*
Generated by:
1. Running `cast da $(huffy -r src/deploy-proxy/NonceIncreaser.huff) | grep JUMPDEST`
2. Copy into neovim
3. Manipulate text to isolate last 16 JUMPDESTs and get tight table
*/
#define constant FINAL_TABLE = 0x03420372039f03c903f0041404350453046e0486049b04ad04bc04c804d104d7

// balls-insert-start
#define macro _CN() = takes(2) returns(1) {
    // takes:                      [zero, offset]
    returndatasize              // [zero, offset, z0]
    create                      // [addr]
    // returns:                    [addr]
}

#define macro _FINAL_SWITCH() = takes(1) returns(0) {
    // takes:                      [skip_count]
    [FINAL_TABLE]               // [skip_count, FINAL_TABLE]
    swap1                       // [FINAL_TABLE, skip_count]
    0xf                         // [FINAL_TABLE, skip_count, 0xf]
    and                         // [FINAL_TABLE, index]
    0x4                         // [FINAL_TABLE, index, 0x4]
    shl                         // [FINAL_TABLE, shift]
    shr                         // [shr(shift, FINAL_TABLE)]
    0xffff                      // [shr(shift, FINAL_TABLE), 0xffff]
    and                         // [and(0xffff, shr(shift, FINAL_TABLE))]
    jump                        // []
    // returns:                    []
}

#define macro _GET_SKIP_COUNT(z0) = takes(0) returns(1) {
    // takes:                      []
    <z0>                        // [z0]
    calldataload                // [first_cd_word]
    <z0>                        // [first_cd_word, z0]
    byte                        // [skip_count]
    // returns:                    [skip_count]
}

#define macro _SKIP_LT(bit, skip_to) = takes(1) returns(1) {
    // takes:                      [skip_count]
    dup1                        // [skip_count, skip_count]
    <bit>                       // [skip_count, skip_count, bit]
    and                         // [skip_count, is_set]
    iszero                      // [skip_count, iszero(is_set)]
    <skip_to>                   // [skip_count, iszero(is_set), skip_to]
    jumpi                       // [skip_count]
    // returns:                    [skip_count]
}
// balls-insert-end

#define macro _MAIN(z0) = takes(0) returns(0) {
    // takes:                      []
    _GET_SKIP_COUNT(<z0>)       // [skip_count]
    // Skip early for presumed hot path (skips between 0-15)
    dup1                        // [skip_count, skip_count]
    0x10 gt                     // [skip_count, skip_count < 16]
    le15 jumpi                  // [skip_count, skip_count < 16]
    _SKIP_LT(0x80, le127)       // [skip_count]
    dup1 0x80 gt                // [skip_count, skip_count < 128]
    le127 jumpi                 // [skip_count]
        <z0> <z0> <z0> <z0> <z0> <z0> <z0> <z0> <z0> <z0> <z0> <z0> <z0> <z0> <z0> <z0>
        <z0> <z0> <z0> <z0> <z0> <z0> <z0> <z0> <z0> <z0> <z0> <z0> <z0> <z0> <z0> <z0>
        <z0> <z0> <z0> <z0> <z0> <z0> <z0> <z0> <z0> <z0> <z0> <z0> <z0> <z0> <z0> <z0>
        <z0> <z0> <z0> <z0> <z0> <z0> <z0> <z0> <z0> <z0> <z0> <z0> <z0> <z0> <z0> <z0>
        <z0> <z0> <z0> <z0> <z0> <z0> <z0> <z0> <z0> <z0> <z0> <z0> <z0> <z0> <z0> <z0>
        <z0> <z0> <z0> <z0> <z0> <z0> <z0> <z0> <z0> <z0> <z0> <z0> <z0> <z0> <z0> <z0>
        <z0> <z0> <z0> <z0> <z0> <z0> <z0> <z0> <z0> <z0> <z0> <z0> <z0> <z0> <z0> <z0>
        <z0> <z0> <z0> <z0> <z0> <z0> <z0> <z0> <z0> <z0> <z0> <z0> <z0> <z0> <z0>
        //                         [skip_count, 0 x 127]
        <z0> <z0> <z0>          // [skip_count, 0 x 127, 0, 0, 0]
        create                  // [skip_count, 0 x 127, addr]
        _CN() _CN() _CN() _CN() _CN() _CN() _CN() _CN() _CN() _CN() _CN() _CN() _CN() _CN() _CN() _CN()
        _CN() _CN() _CN() _CN() _CN() _CN() _CN() _CN() _CN() _CN() _CN() _CN() _CN() _CN() _CN() _CN()
        _CN() _CN() _CN() _CN() _CN() _CN() _CN() _CN() _CN() _CN() _CN() _CN() _CN() _CN() _CN() _CN()
        _CN() _CN() _CN() _CN() _CN() _CN() _CN() _CN() _CN() _CN() _CN() _CN() _CN() _CN() _CN() _CN()
        _CN() _CN() _CN() _CN() _CN() _CN() _CN() _CN() _CN() _CN() _CN() _CN() _CN() _CN() _CN() _CN()
        _CN() _CN() _CN() _CN() _CN() _CN() _CN() _CN() _CN() _CN() _CN() _CN() _CN() _CN() _CN() _CN()
        _CN() _CN() _CN() _CN() _CN() _CN() _CN() _CN() _CN() _CN() _CN() _CN() _CN() _CN() _CN() _CN()
        _CN() _CN() _CN() _CN() _CN() _CN() _CN() _CN() _CN() _CN() _CN() _CN() _CN() _CN() _CN()
        //                         [skip_count, addr]
        pop                     // [skip_count]
    le127:
        _SKIP_LT(0x40, le63)
        <z0> <z0> <z0> <z0> <z0> <z0> <z0> <z0> <z0> <z0> <z0> <z0> <z0> <z0> <z0> <z0>
        <z0> <z0> <z0> <z0> <z0> <z0> <z0> <z0> <z0> <z0> <z0> <z0> <z0> <z0> <z0> <z0>
        <z0> <z0> <z0> <z0> <z0> <z0> <z0> <z0> <z0> <z0> <z0> <z0> <z0> <z0> <z0> <z0>
        <z0> <z0> <z0> <z0> <z0> <z0> <z0> <z0> <z0> <z0> <z0> <z0> <z0> <z0> <z0>
        //                         [skip_count, 0 x 63]
        <z0> <z0> <z0>          // [skip_count, 0 x 63, 0, 0, 0]
        create                  // [skip_count, 0 x 63, addr]
        _CN() _CN() _CN() _CN() _CN() _CN() _CN() _CN() _CN() _CN() _CN() _CN() _CN() _CN() _CN() _CN()
        _CN() _CN() _CN() _CN() _CN() _CN() _CN() _CN() _CN() _CN() _CN() _CN() _CN() _CN() _CN() _CN()
        _CN() _CN() _CN() _CN() _CN() _CN() _CN() _CN() _CN() _CN() _CN() _CN() _CN() _CN() _CN() _CN()
        _CN() _CN() _CN() _CN() _CN() _CN() _CN() _CN() _CN() _CN() _CN() _CN() _CN() _CN() _CN()
        //                         [skip_count, addr]
        pop                     // [skip_count]
    le63:
        _SKIP_LT(0x20, le31)
        <z0> <z0> <z0> <z0> <z0> <z0> <z0> <z0> <z0> <z0> <z0> <z0> <z0> <z0> <z0> <z0>
        <z0> <z0> <z0> <z0> <z0> <z0> <z0> <z0> <z0> <z0> <z0> <z0> <z0> <z0> <z0>
        //                         [skip_count, 0 x 31]
        <z0> <z0> <z0>          // [skip_count, 0 x 31, 0, 0, 0]
        create                  // [skip_count, 0 x 31, addr]
        _CN() _CN() _CN() _CN() _CN() _CN() _CN() _CN() _CN() _CN() _CN() _CN() _CN() _CN() _CN() _CN()
        _CN() _CN() _CN() _CN() _CN() _CN() _CN() _CN() _CN() _CN() _CN() _CN() _CN() _CN() _CN()
        //                         [skip_count, addr]
        pop                     // [skip_count]
    le31:
        _SKIP_LT(0x10, le15)
        <z0> <z0> <z0> <z0> <z0> <z0> <z0> <z0> <z0> <z0> <z0> <z0> <z0> <z0> <z0>
        //                         [skip_count, 0 x 15]
        <z0> <z0> <z0>          // [skip_count, 0 x 15, 0, 0, 0]
        create                  // [skip_count, 0 x 15, addr]
        _CN() _CN() _CN() _CN() _CN() _CN() _CN() _CN() _CN() _CN() _CN() _CN() _CN() _CN() _CN()
        //                         [skip_count, addr]
        pop                     // [skip_count]
    le15: //                       [skip_count]
        _FINAL_SWITCH()         // []
        n15:
            <z0> <z0> <z0> <z0> <z0> <z0> <z0> <z0> <z0> <z0> <z0> <z0> <z0> <z0>
            //                     [0 x 14]
            <z0> <z0> <z0>      // [0 x 14, 0, 0, 0]
            create              // [0 x 14, addr]
            _CN() _CN() _CN() _CN() _CN() _CN() _CN() _CN() _CN() _CN() _CN() _CN() _CN() _CN()
            //                     [addr]
            stop
        n14:
            <z0> <z0> <z0> <z0> <z0> <z0> <z0> <z0> <z0> <z0> <z0> <z0> <z0>
            //                     [0 x 13]
            <z0> <z0> <z0>      // [0 x 13, 0, 0, 0]
            create              // [0 x 13, addr]
            _CN() _CN() _CN() _CN() _CN() _CN() _CN() _CN() _CN() _CN() _CN() _CN() _CN()
            //                     [addr]
            stop
        n13:
            <z0> <z0> <z0> <z0> <z0> <z0> <z0> <z0> <z0> <z0> <z0> <z0>
            //                     [0 x 12]
            <z0> <z0> <z0>      // [0 x 12, 0, 0, 0]
            create              // [0 x 12, addr]
            _CN() _CN() _CN() _CN() _CN() _CN() _CN() _CN() _CN() _CN() _CN() _CN()
            //                     [addr]
            stop
        n12:
            <z0> <z0> <z0> <z0> <z0> <z0> <z0> <z0> <z0> <z0> <z0>
            //                     [0 x 11]
            <z0> <z0> <z0>      // [0 x 11, 0, 0, 0]
            create              // [0 x 11, addr]
            _CN() _CN() _CN() _CN() _CN() _CN() _CN() _CN() _CN() _CN() _CN()
            //                     [addr]
            stop
        n11:
            <z0> <z0> <z0> <z0> <z0> <z0> <z0> <z0> <z0> <z0>
            //                     [0 x 10]
            <z0> <z0> <z0>      // [0 x 10, 0, 0, 0]
            create              // [0 x 10, addr]
            _CN() _CN() _CN() _CN() _CN() _CN() _CN() _CN() _CN() _CN()
            //                     [addr]
            stop
        n10:
            <z0> <z0> <z0> <z0> <z0> <z0> <z0> <z0> <z0>
            //                     [0 x 9]
            <z0> <z0> <z0>      // [0 x 9, 0, 0, 0]
            create              // [0 x 9, addr]
            _CN() _CN() _CN() _CN() _CN() _CN() _CN() _CN() _CN()
            //                     [addr]
            stop
        n9:
            <z0> <z0> <z0> <z0> <z0> <z0> <z0> <z0>
            //                     [0 x 8]
            <z0> <z0> <z0>      // [0 x 8, 0, 0, 0]
            create              // [0 x 8, addr]
            _CN() _CN() _CN() _CN() _CN() _CN() _CN() _CN()
            //                     [addr]
            stop
        n8:
            <z0> <z0> <z0> <z0> <z0> <z0> <z0>
            //                     [0 x 7]
            <z0> <z0> <z0>      // [0 x 7, 0, 0, 0]
            create              // [0 x 7, addr]
            _CN() _CN() _CN() _CN() _CN() _CN() _CN()
            //                     [addr]
            stop
        n7:
            <z0> <z0> <z0> <z0> <z0> <z0>
            //                     [0 x 6]
            <z0> <z0> <z0>      // [0 x 6, 0, 0, 0]
            create              // [0 x 6, addr]
            _CN() _CN() _CN() _CN() _CN() _CN()
            //                     [addr]
            stop
        n6:
            <z0> <z0> <z0> <z0> <z0>
            //                     [0 x 5]
            <z0> <z0> <z0>      // [0 x 5, 0, 0, 0]
            create              // [0 x 5, addr]
            _CN() _CN() _CN() _CN() _CN()
            //                     [addr]
            stop
        n5:
            <z0> <z0> <z0> <z0> // [0, 0, 0, 0]
            <z0> <z0> <z0>      // [0, 0, 0, 0, 0, 0, 0]
            create              // [0, 0, 0, 0, addr]
            _CN() _CN() _CN() _CN()
            //                     [addr]
            stop
        n4:
            <z0> <z0> <z0>      // [0, 0, 0]
            <z0> <z0> <z0>      // [0, 0, 0, 0, 0, 0]
            create              // [0, 0, 0, addr]
            _CN() _CN() _CN()   // [addr]
            stop
        n3:
            <z0> <z0>           // [0, 0]
            <z0> <z0> <z0>      // [0, 0, 0, 0, 0]
            create              // [0, 0, addr]
            _CN() _CN()         // [addr]
            stop
        n2:
            <z0>                // [0]
            <z0> <z0> <z0>      // [0, 0, 0, 0]
            create              // [0, addr]
            _CN()               // [addr]
            stop
        n1:
            <z0> <z0> <z0>      // [0, 0, 0]
            create              // [addr]
            stop
        n0:
            stop
}
