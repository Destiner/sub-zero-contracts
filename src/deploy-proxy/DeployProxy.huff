#define macro MAIN() = takes(0) returns(0) {
    _MAIN(returndatasize)
}

#define constant NONCE_INCREASER = 0xcccccccccccccccccccccccccccccccccccccccc

// balls-insert-start
#define macro _MAIN_TEMPLATE(z0) = takes(0) returns(0) {
    // takes:                      []
    0x1                         // [one]
    returndatasize              // [one, z1]
    dup2                        // [one, z1, one]
    calldatasize                // [one, z1, one, calldatasize()]
    sub                         // [one, z1, initcode_size]
    <z0>                        // [one, z1, initcode_size, z0]
    <z0>                        // [one, z1, initcode_size, z0, z0]
    dup5                        // [one, z1, initcode_size, z0, z0, one]
    <z0>                        // [one, z1, initcode_size, z0, z0, one, z0]
    calldatasize                // [one, z1, initcode_size, z0, z0, one, z0, calldatasize()]
    <z0>                        // [one, z1, initcode_size, z0, z0, one, z0, calldatasize(), z0]
    <z0>                        // [one, z1, initcode_size, z0, z0, one, z0, calldatasize(), z0, z0]
    calldatacopy                // [one, z1, initcode_size, z0, z0, one, z0]
    [NONCE_INCREASER]           // [one, z1, initcode_size, z0, z0, one, z0, NONCE_INCREASER]
    gas                         // [one, z1, initcode_size, z0, z0, one, z0, NONCE_INCREASER, gas()]
    delegatecall                // [one, z1, initcode_size, inc_success]
    0x5                         // [one, z1, initcode_size, inc_success, 0x5]
    shl                         // [one, z1, initcode_size, return_len]
    swap3                       // [return_len, z1, initcode_size, one]
    callvalue                   // [return_len, z1, initcode_size, one, callvalue()]
    create                      // [return_len, z1, addr]
    dup2                        // [return_len, z1, addr, z1]
    mstore                      // [return_len, z1]
    return                      // []
    // returns:                    []
}
// balls-insert-end

#define macro _MAIN(z0) = takes(0) returns(0) {
    // takes:                      []
    0x1                         // [one]
    <z0>                        // [one, z1]
    dup2                        // [one, z1, one]
    calldatasize                // [one, z1, one, calldatasize()]
    sub                         // [one, z1, initcode_size]
    <z0>                        // [one, z1, initcode_size, z0]
    <z0>                        // [one, z1, initcode_size, z0, z0]
    dup5                        // [one, z1, initcode_size, z0, z0, one]
    <z0>                        // [one, z1, initcode_size, z0, z0, one, z0]
    calldatasize                // [one, z1, initcode_size, z0, z0, one, z0, calldatasize()]
    <z0>                        // [one, z1, initcode_size, z0, z0, one, z0, calldatasize(), z0]
    <z0>                        // [one, z1, initcode_size, z0, z0, one, z0, calldatasize(), z0, z0]
    calldatacopy                // [one, z1, initcode_size, z0, z0, one, z0]
    [NONCE_INCREASER]           // [one, z1, initcode_size, z0, z0, one, z0, NONCE_INCREASER]
    gas                         // [one, z1, initcode_size, z0, z0, one, z0, NONCE_INCREASER, gas()]
    delegatecall                // [one, z1, initcode_size, inc_success]
    0x5                         // [one, z1, initcode_size, inc_success, 0x5]
    shl                         // [one, z1, initcode_size, return_len]
    swap3                       // [return_len, z1, initcode_size, one]
    callvalue                   // [return_len, z1, initcode_size, one, callvalue()]
    create                      // [return_len, z1, addr]
    dup2                        // [return_len, z1, addr, z1]
    mstore                      // [return_len, z1]
    return                      // []
    // returns:                    []
}
